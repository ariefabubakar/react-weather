{"version":3,"sources":["components/Header.js","components/WeatherSearch.js","components/WeatherDetail.js","components/WeatherTable.js","components/Main.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","WeatherSearch","handleChange","event","setState","target","name","value","state","city","type","placeholder","this","onChange","onClick","props","handleSearch","React","Component","WeatherDetail","selectedDay","style","display","src","weather","icon","height","width","flexGrow","description","charAt","toUpperCase","slice","temp","max","toFixed","min","color","morn","day","eve","night","feels_like","WeatherTable","list","country","handleSelected","map","item","index","key","cursor","Date","dt","toDateString","Main","isLoaded","fetch","then","res","json","result","cod","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.40a4917e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n//Stateless or Functional Component\r\nfunction Header() {\r\n    return (\r\n        <header className=\"bg-dark text-light py-5 text-center\">\r\n            <h1>Weather</h1>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nclass WeatherSearch extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            city: \"\"\r\n        }\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState(\r\n            {\r\n                [event.target.name]: event.target.value\r\n            }\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"input-group mb-3\">\r\n                <input type=\"text\" className=\"form-control\" placeholder=\"Search city\" value={this.state.city} name=\"city\" onChange={this.handleChange} />\r\n                <div className=\"input-group-append\">\r\n                    <button className=\"btn btn-primary\" type=\"button\" onClick={() => this.props.handleSearch(this.state.city)}>Search</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default WeatherSearch;","import React from 'react';\r\n\r\nfunction WeatherDetail({ selectedDay }) {\r\n    return (\r\n        <div className=\"card my-3 p-3\">\r\n            {/* <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-1\">\r\n                        <img src={`http://openweathermap.org/img/wn/${selectedDay.weather[0].icon}@2x.png`} height={50} width={50} />\r\n                    </div>\r\n                    <div className=\"col-11\">\r\n                        <span className=\"font-weight-bold\">{selectedDay.weather[0].description.charAt(0).toUpperCase()}{selectedDay.weather[0].description.slice(1)}</span><br />\r\n                        <span>The high will be {selectedDay.temp.max.toFixed(0)}°C, the low will be {selectedDay.temp.min.toFixed(0)}°C</span>\r\n                    </div>\r\n                </div>\r\n            </div> */}\r\n            <div style={{display: \"flex\"}}>\r\n                <div>\r\n                    <img src={`http://openweathermap.org/img/wn/${selectedDay.weather[0].icon}@2x.png`} height={50} width={50} />\r\n                </div>\r\n                <div style={{flexGrow: 1}}>\r\n                    <span className=\"font-weight-bold\">{selectedDay.weather[0].description.charAt(0).toUpperCase()}{selectedDay.weather[0].description.slice(1)}</span><br />\r\n                    <span>The high will be {selectedDay.temp.max.toFixed(0)}°C, the low will be {selectedDay.temp.min.toFixed(0)}°C</span>\r\n                </div>\r\n            </div>\r\n            <table className=\"table py-6\">\r\n                <thead>\r\n                    <tr>\r\n                        <th></th>\r\n                        <th>Morning</th>\r\n                        <th>Afternoon</th>\r\n                        <th>Evening</th>\r\n                        <th>Night</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td style={{ color: \"#8a8a8a\" }}>TEMPERATURE</td>\r\n                        <td>{selectedDay.temp.morn.toFixed(0)}°C</td>\r\n                        <td>{selectedDay.temp.day.toFixed(0)}°C</td>\r\n                        <td>{selectedDay.temp.eve.toFixed(0)}°C</td>\r\n                        <td>{selectedDay.temp.night.toFixed(0)}°C</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td style={{ color: \"#8a8a8a\" }}>FEELS LIKE</td>\r\n                        <td>{selectedDay.feels_like.morn.toFixed(0)}°C</td>\r\n                        <td>{selectedDay.feels_like.day.toFixed(0)}°C</td>\r\n                        <td>{selectedDay.feels_like.eve.toFixed(0)}°C</td>\r\n                        <td>{selectedDay.feels_like.night.toFixed(0)}°C</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WeatherDetail;","import React from 'react';\r\n\r\nfunction WeatherTable({ list, city, country, handleSelected }) {\r\n    return (\r\n        <div className=\"card p-3\">\r\n            <h2>7-day forecast for {city}, {country}</h2>\r\n            <table className=\"table table-hover table-striped\">\r\n                <tbody>\r\n                    {\r\n                        list.map((item, index) =>\r\n                            <tr key={index} onClick={() => handleSelected(item)} style={{cursor: \"pointer\"}}>\r\n                                <td>{new Date(item.dt * 1000).toDateString()}</td>\r\n                                <td><img src={`http://openweathermap.org/img/wn/${item.weather[0].icon}@2x.png`} height={50} width={50} /> {item.temp.day.toFixed(0)}°C / {item.temp.min.toFixed(0)}°C</td>\r\n                                <td>{item.weather[0].description}</td>\r\n                                {/* <td>{item.assignee}</td> */}\r\n                            </tr>\r\n                        )\r\n                    }\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WeatherTable;","import React from 'react';\r\nimport WeatherSearch from './WeatherSearch';\r\nimport WeatherDetail from './WeatherDetail';\r\nimport WeatherTable from './WeatherTable';\r\n\r\nclass Main extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            isLoaded: true,\r\n            weather: null,\r\n            selectedDay: null\r\n        }\r\n    }\r\n\r\n    handleSearch = (city) => {\r\n        this.setState({\r\n            isLoaded: false,\r\n            weather: null,\r\n\r\n        });\r\n\r\n        fetch(`https://api.openweathermap.org/data/2.5/forecast/daily?q=${city}&appid=9fd7a449d055dba26a982a3220f32aa2&units=metric`)\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    if (result.cod === \"200\") {\r\n                        this.setState({\r\n                            isLoaded: true,\r\n                            weather: result,\r\n                        });\r\n                    }\r\n                    else {\r\n                        this.setState({\r\n                            isLoaded: true,\r\n                            weather: null,\r\n                        });\r\n                    }\r\n                }\r\n            );\r\n    }\r\n\r\n    handleSelected = (item) => {\r\n        this.setState({\r\n            selectedDay: item\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <main className=\"container py-3\">\r\n                <WeatherSearch handleSearch={this.handleSearch} />\r\n                {this.state.isLoaded ? (this.state.weather &&\r\n                    <WeatherTable\r\n                        list={this.state.weather.list}\r\n                        city={this.state.weather.city.name}\r\n                        country={this.state.weather.city.country}\r\n                        handleSelected={this.handleSelected} />) :\r\n                    <span>Loading...</span>\r\n                }\r\n                {this.state.selectedDay &&\r\n                    <WeatherDetail selectedDay={this.state.selectedDay} />\r\n                }\r\n            </main>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\n\r\nexport const Footer = () => {\r\n    return (\r\n        <footer className=\"bg-dark text-light py-5 text-center\">\r\n            <p>Copyright &copy; 2020</p>\r\n        </footer>\r\n    );\r\n}","import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Main from './components/Main';\nimport {Footer} from './components/Footer';\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <Main />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}